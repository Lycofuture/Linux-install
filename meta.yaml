# 延迟检测 URL
p: &p
  {type: http, interval: 3600, header: {User-Agent: ["meta", "clash"]}, health-check: {enable: true, url: https://www.gstatic.com/generate_204, interval: 300, timeout: 5000, lazy: false}}

# 配置代理提供者
proxy-providers:
  # 第一个代理提供者
  provider1:
    <<: *p  # 继承通用配置
    url: "https://ghp.ci/https://raw.githubusercontent.com/mfbpn/tg_mfbpn_sub/main/trial.yaml"

  # 第二个代理提供者
  provider2:
    <<: *p  # 继承通用配置
    url: "https://ghp.ci/https://raw.githubusercontent.com/snakem982/proxypool/main/source/clash-meta.yaml"

# URL 测试配置
u:: &u
  type: url-test  # 测试类型
  use:
    - provider1   # 使用第一个代理提供者
    - provider2   # 使用第二个代理提供者

# http(s) 代理端口
port: 7890

# socks4/4a/5 代理端口
socks-port: 7891

# 混合端口配置，通常用于多种协议的代理服务
mixed-port: 7892

# 重定向端口配置，用于流量重定向
redir-port: 9797

# 透明代理端口配置，用于透明代理模式
tproxy-port: 9898

# 允许局域网中的设备访问
allow-lan: true

# 绑定地址，仅允许其他设备通过这个地址访问
bind-address: "*"

# 禁止连接的 IP 地址段，黑名单优先级高于白名单
lan-disallowed-ips: []

# http(s)/socks/mixed代理的用户验证
authentication:
  - "user1:pass1"
  - "user2:pass2"

# 设置允许跳过验证的 IP 段
skip-auth-prefixes:
  - 127.0.0.1/8
  - ::1/128

# 允许连接的 IP 地址段，仅作用于 allow-lan 为 true 默认值为 0.0.0.0/0和 ::/0
lan-allowed-ips:
  - 0.0.0.0/0
  - ::/0

# 代理工作模式，'rule' 表示基于规则的模式
mode: rule

# 日志级别设置，'debug' 表示详细的调试日志
log-level: debug

# 启用 IPv6 支持
ipv6: true

# 保持连接的时间间隔，单位是秒, 减少移动设备耗电问题的临时措施。
keep-alive-interval: 30

# 进程匹配模式
# always 开启，强制匹配所有进程
# strict 默认，由 Clash 判断是否开启
# off 不匹配进程，推荐在路由器上使用此模式
find-process-mode: always

# 外部控制器配置，设置控制器的地址和端口
external-controller: :9090

# Unix socket API 监听地址
external-controller-unix: mihomo.sock

# HTTPS-API 监听地址，需要配置 tls 部分证书和其私钥配置，使用 TLS 也必须填写 external-controller
external-controller-tls: 127.0.0.1:9443

# 在 RESTful API 端口上开启 DOH 服务器
external-doh-server: /dns-query

# 密码设置，用于保护外部控制器的访问
secret: ""

# 外部用户界面配置，'ui' 表示使用默认用户界面
external-ui: ui

#  自定义外部用户界面名字, 合并为 external-ui/xd
external-ui-name: xd

# 外部用户界面的 URL，指向一个 GitHub 仓库中的压缩包
external-ui-url: "https://ghp.ci/https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"

# 缓存
profile:
  store-selected: true
  # 储存 API 对策略组的选择，以供下次启动时使用
  store-fake-ip: true
  # 储存 fakeip 映射表，域名再次发生连接时，使用原有映射地址

# 是否使用统一延迟设置，false 表示不使用统一延迟
unified-delay: true

# 是否允许 TCP 并发连接
tcp-concurrent: true

# 出站接口
interface-name: eth0

# 路由标记, 为 Linux 下的出站连接提供默认流量标记
routing-mark: 6666

# 目前仅用于 API 的 https
tls:
  certificate: string # 证书 PEM 格式，或者 证书的路径
  private-key: string # 证书对应的私钥 PEM 格式，或者私钥路径

# 全局客户端指纹设置，'chrome' 表示模拟 Chrome 浏览器的指纹
global-client-fingerprint: chrome

# 启用地理数据模式，以便根据地理位置进行优化
geodata-mode: true

# GEO 文件加载模式
# standard：标准加载器
# memconservative：专为内存受限 (小内存) 设备优化的加载器 (默认值).
geodata-loader: memconservative

# 是否自动更新地理位置数据
geo-auto-update: true

# 地理位置数据更新的时间间隔，单位是小时
geo-update-interval: 24

# 地理位置数据源的 URL 配置
geox-url:
  # GeoIP 数据的 URL，用于获取 IP 地址的地理位置
  geoip: "https://ghp.ci/https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat"

  # GeoSite 数据的 URL，用于获取网站分类信息
  geosite: "https://ghp.ci/https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat"

  # MMDB 数据的 URL，用于获取国家级地理位置信息
  mmdb: "https://ghp.ci/https://github.com/Loyalsoldier/geoip/releases/latest/download/Country.mmdb"

  # ASN 数据库下载地址，用于获取 ASN 信息
  asn: "https://ghp.ci/https://github.com/Loyalsoldier/geoip/blob/release/GeoLite2-ASN.mmdb"

# 自定全局 UA
global-ua: clash.meta

# 配置 NTP（网络时间协议）服务
ntp:
  enable: true  # 启用 NTP 服务
  write-to-system: false  # 不将时间同步写入系统时间
  server: time.apple.com  # NTP 服务器地址
  port: 123  # NTP 服务端口号
  interval: 30  # 重新同步时间的间隔（单位：分钟）

# 配置网络嗅探器
sniffer:
  enable: true  # 开启网络嗅探器，捕获和分析网络流量
  force-dns-mapping: true  # 强制 DNS 映射，确保 DNS 请求被嗅探器处理
  parse-pure-ip: true  # 解析纯 IP 地址，便于分析 IP 流量
  override-destination: false  # 禁止覆盖目标地址，保持原有目标地址

  sniff:  # 嗅探器配置
    HTTP:  # HTTP 协议配置
      ports: [80, 8080-8880]  # 监听的 HTTP 端口范围，捕获 HTTP 流量
      override-destination: true  # 允许覆盖目标地址，以便更改流量去向
    TLS:  # TLS（传输层安全协议）配置
      ports: [443, 8443]  # 监听的 TLS 端口，捕获 HTTPS 流量
    QUIC:  # QUIC 协议配置
      ports: [443, 8443]  # 监听的 QUIC 端口，捕获 QUIC 流量

  force-domain:  # 强制域名嗅探配置
    - '+.v2ex.com'  # 捕获以 .v2ex.com 结尾的域名流量

  skip-domain:  # 排除的域名配置
    - Mijia Cloud  # 跳过 Mijia Cloud 域名的流量，避免干扰

# 配置虚拟网络接口（TUN）
tun:
  enable: true  # 启用 TUN 设备，以便创建虚拟网络接口，支持透明代理功能
  stack: gvisor  # 使用 gvisor 网络栈，可支持 IPv4 和 IPv6 网络栈的流量处理
  auto-route: true  # 自动配置路由，确保所有匹配规则的流量通过 TUN 设备转发
  auto-redirect: true  # （可选）自动重定向流量到 TUN 设备，确保非代理流量也能正确处理
  auto-detect-interface: true  # 自动检测系统中的网络接口，适应网络环境变化
  strict-route: false  # 严格路由模式，启用时仅处理通过指定路由的流量
  dns-hijack:  # DNS 劫持配置，确保所有 DNS 请求通过代理处理
    - any:53  # 劫持所有地址上的 UDP 端口 53 的 DNS 请求
    - tcp://any:53  # 劫持所有地址上的 TCP 端口 53 的 DNS 请求
  device: utun0  # TUN 设备的名称，系统将根据此名称创建虚拟网络接口
  mtu: 9000  # 设置最大传输单元（MTU），定义每个数据包的最大大小
  gso: true  # 启用大数据包分片（GSO），减少 CPU 负载
  gso-max-size: 65536  # 设置 GSO 的最大包大小
  udp-timeout: 300  # 设置 UDP 连接的超时时间，单位为秒
  iproute2-table-index: 2022  # 指定用于路由规则的路由表索引，确保路由表的唯一性
  iproute2-rule-index: 9000  # 指定用于 IP 规则的索引，标识特定路由规则
  endpoint-independent-nat: false  # 禁用端点独立 NAT，防止连接时出现不必要的 NAT 映射
  include-interface: []  # 定义要包含的网络接口（空值表示包含所有接口）
  exclude-interface: []  # 定义要排除的网络接口（空值表示不排除任何接口）
  route-address:  # TUN 设备的路由地址配置，用于引导特定网络流量通过 TUN
    - 0.0.0.0/1  # 将 IPv4 前半部分的流量 (0.0.0.0 - 127.255.255.255) 路由到 TUN 设备
    - 128.0.0.0/1  # 将 IPv4 后半部分的流量 (128.0.0.0 - 255.255.255.255) 路由到 TUN 设备
    - "::/1"  # 将 IPv6 前半部分的流量 (:: - 7FFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF) 路由到 TUN 设备
    - "8000::/1"  # 将 IPv6 后半部分的流量 (8000:: - FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF) 路由到 TUN 设备
  route-exclude-address:  # 排除特定网络流量不通过 TUN 设备，通常用于保留本地流量
    - 192.168.0.0/16  # 排除 IPv4 局域网地址范围，避免将内网流量发送到 TUN 设备
    - fc00::/7  # 排除 IPv6 本地链路地址，避免干扰本地 IPv6 通信

# 配置 DNS
dns:
  enable: true  # 启用 DNS 服务
  prefer-h3: true  # 优先使用 HTTP/3 协议进行 DNS 查询
  use-hosts: false  # 使用本地 hosts 文件中的 DNS 记录
  use-system-hosts: false  # 使用系统 hosts 文件中的 DNS 记录
  respect-rules: true  # 遵循配置的规则进行 DNS 查询
  listen: :1053  # DNS 服务监听的端口
  ipv6: true  # 启用 IPv6 支持

  # 路由器建议使用 redir-host 以实现最佳兼容性
  # 其他设备可以使用 fake-ip 模式
  enhanced-mode: redir-host  # 使用 fake-ip 模式以避免 DNS 污染
  fake-ip-range: 198.18.0.0/15  # 指定 fake-ip 地址范围
  fake-ip-filter-mode: blacklist  # 使用黑名单模式过滤 fake-ip
  fake-ip-filter:  # fake-ip 过滤列表
    - '*'  # 所有请求都经过过滤 
    - '+.lan'  # 允许局域网内的请求
    - '+.local'  # 允许本地请求

  default-nameserver:  # 默认 DNS 服务器列表
    - 223.5.5.5  # 阿里 DNS
    - 119.29.29.29  # 腾讯 DNS
    - '[2400:3200::1]'  # 阿里 IPv6 DNS
    - '[2402:4e00::]'  # 腾讯 IPV6 DNS
    - system  # 使用系统配置的 DNS

  nameserver:  # 指定 DNS 服务器
    - 'https://dns.alidns.com/dns-query'  # 阿里 DNS
    - 'https://doh.pub/dns-query'  # 腾讯 DNS
    - dhcp://en0  # 使用 DHCP 获取的 DNS

  fallback:  # 备用 DNS 服务器
    - 'tls://dns.google'  # Google 的 TLS DNS
    - 'tls://1dot1dot1dot1.cloudflare-dns.com'  # Cloudflare 的 TLS DNS
    - 'tls://dns10.quad9.net'  # Quad9 的 TLS DNS
    - 'tls://unfiltered.adguard-dns.com'  # AdGuard 的 TLS DNS
    - dhcp://en0  # 使用 DHCP 获取的备用 DNS

  proxy-server-nameserver:  # 代理服务器 DNS 列表
    - 'https://dns.alidns.com/dns-query'  # 阿里 DNS

  nameserver-policy:  # DNS 服务器策略
    "geosite:cn":
      - 'tls://dns.alidns.com'  # 阿里云 TLS DNS
      - 'tls://dot.pub'  # 腾讯 TLS DNS
    "geosite:!cn":  # 排除中国大陆的 DNS 请求
      - 'https://dns.google/dns-query'  # Google DNS
      - 'https://cloudflare-dns.com/dns-query'  # Cloudflare DNS
      - 'https://dns10.quad9.net/dns-query'  # Quad9 DNS
      - 'https://unfiltered.adguard-dns.com/dns-query'  # AdGuard DNS

  fallback-filter:  # 回退 DNS 策略过滤
    geoip: true  # 启用 GeoIP 过滤
    geoip-code: cn  # 设定 GeoIP 代码为中国
    geosite:  # 过滤的地理位置站点
      - gfw  # 排除中国地理位置的站点
    ipcidr: ['240.0.0.0/4']  # 排除的 IP CIDR 范围
    domain:  # 排除的域名列表
      - '+.google.com'  # 排除 Google 域名
      - '+.facebook.com'  # 排除 Facebook 域名
      - '+.youtube.com'  # 排除 YouTube 域名

proxies:
  - {name: "🎯全球直连", type: direct, udp: true}
  - {name: "⛔️广告拦截", type: reject, udp: true}

proxy-groups:
  - {name: 🔰节点选择, type: select, proxies: [🎯全球直连, ♻️自动选择, ⚡️均衡负载, 🔯故障转移, 📦全部节点, 🇭🇰香港, 🇹🇼台湾, 🇯🇵日本, 🇺🇸美国, 🇸🇬新加坡, 🇺🇸洛杉矶, 🇬🇧英国, 🇩🇪德国, 🇫🇷法国, 🇨🇦加拿大, 🇦🇺澳大利亚, 🇰🇷韩国, 🇷🇺俄罗斯, 🇳🇱荷兰, 🇮🇳印度, 🇲🇾马来西亚, 🇵🇱波兰, 🇪🇪爱沙尼亚, 🇦🇪阿联酋, 🇳🇬尼日利亚, 🇧🇬保加利亚, 🇸🇨塞舌尔, 🇪🇸西班牙, 🇻🇳越南, 🇸🇽荷属圣马丁, 🇲🇴澳门, 🇵🇭菲律宾, 🇹🇭泰国, 🇲🇳蒙古, 🌐其它地区]}

  - {name: 🚫广告拦截, type: select, proxies: [⛔️广告拦截, 🔰节点选择]}

  - {name: ♻️自动选择, <<: *u, interval: 2, type: url-test}

  - {name: ⚡️均衡负载, <<: *u, strategy: round-robin, type: load-balance}

  - {name: 🔯故障转移, <<: *u, type: fallback}

  - {name: 📦全部节点, <<: *u, type: select}

  - {name: 🇭🇰香港, <<: *u, filter: "(?i)🇭🇰|香港|hk_|hongkong|hong kong"}
  
  - {name: 🇹🇼台湾, <<: *u, filter: "(?i)🇹🇼|台湾|tw_|taiwan|tai wan"}
  
  - {name: 🇯🇵日本, <<: *u, filter: "(?i)🇯🇵|日本|jp_|japan"}
  
  - {name: 🇺🇸美国, <<: *u, filter: "(?i)🇺🇸|美国|us_|unitedstates|united states"}
  
  - {name: 🇸🇬新加坡, <<: *u, filter: "(?i)🇸🇬|新加坡|sg_|singapore"}
  
  - {name: 🇺🇸洛杉矶, <<: *u, filter: "(?i)洛杉矶|l.a._|losangeles|la sangeles"}
  
  - {name: 🇩🇪德国, <<: *u, filter: "(?i)🇩🇪|德国|de_|germany"}
  
  - {name: 🇫🇷法国, <<: *u, filter: "(?i)🇫🇷|法国|fr_|france"}
  
  - {name: 🇨🇦加拿大, <<: *u, filter: "(?i)🇨🇦|加拿大|ca_|canada"}
  
  - {name: 🇦🇺澳大利亚, <<: *u, filter: "(?i)🇦🇺|澳大利亚|au_|australia"}
  
  - {name: 🇰🇷韩国, <<: *u, filter: "(?i)🇰🇷|韩国|kr_|korea|southkorea|south korea"}
  
  - {name: 🇷🇺俄罗斯, <<: *u, filter: "(?i)🇷🇺|俄罗斯|ru_|russia"}
  
  - {name: 🇳🇱荷兰, <<: *u, filter: "(?i)🇳🇱|荷兰|nl_|netherlands|holland"}
  
  - {name: 🇮🇳印度, <<: *u, filter: "(?i)🇮🇳|印度|in_|india"}
  
  - {name: 🇲🇾马来西亚, <<: *u, filter: "(?i)🇲🇾|马来西亚|my_|malaysia"}

  - {name: 🇵🇱波兰, <<: *u, filter: "(?i)🇵🇱|波兰|pl_|poland"}

  - {name: 🇪🇪爱沙尼亚, <<: *u, filter: "(?i)🇪🇪|爱沙尼亚|ee_|estonia"}

  - {name: 🇦🇪阿联酋, <<: *u, filter: "(?i)🇦🇪|阿联酋|ae_|uae|unitedarabemirates|united arab emirates"}

  - {name: 🇳🇬尼日利亚, <<: *u, filter: "(?i)🇳🇬|尼日利亚|ng_|nigeria"}

  - {name: 🇧🇬保加利亚, <<: *u, filter: "(?i)🇧🇬|保加利亚|bg_|bulgaria"}

  - {name: 🇸🇨塞舌尔, <<: *u, filter: "(?i)🇸🇨|塞舌尔|sc_|seychelles"}

  - {name: 🇬🇧英国, <<: *u, filter: "(?i)🇬🇧|英国|gb_|greatbritain|great britain"}

  - {name: 🇪🇸西班牙, <<: *u, filter: "(?i)🇪🇸|西班牙|es_|spain"}
  
  - {name: 🇻🇳越南, <<: *u, filter: "(?i)🇻🇳|越南|vn_|vietnam"}

  - {name: 🇸🇽荷属圣马丁, <<: *u, filter: "(?i)🇸🇽|荷属圣马丁|nn_|sintmaarten|sint maarten|stmaarten|st maarten"}
  
  - {name: 🇲🇴澳门, <<: *u, filter: "(?i)🇲🇴|澳门|macao|mo_"}
  
  - {name: 🇵🇭菲律宾, <<: *u, filter: "(?i)🇵🇭|菲律宾|pilipinas|ph_"}
  
  - {name: 🇹🇭泰国, <<: *u, filter: "(?i)🇹🇭|泰国|thailand|th_"}
  
  - {name: 🇲🇳蒙古, <<: *u, filter: "(?i)🇲🇳|蒙古|mongolia|mn_"}

  - {name: 🌐其它地区, <<: *u, type: select, filter: "(?i)^(?!.*(?:🇭🇰|香港|hk_|hongkong|hong kong|🇹🇼|台湾|tw_|taiwan|tai wan|🇯🇵|日本|jp_|japan|🇺🇸|美国|us_|unitedstates|united states|🇸🇬|新加坡|sg_|singapore|🇺🇸洛杉矶|洛杉矶|l.a._|losangeles|la sangeles|🇩🇪|德国|de_|germany|🇫🇷|法国|fr_|france|🇨🇦|加拿大|ca_|canada|🇦🇺|澳大利亚|au_|australia|🇰🇷|韩国|kr_|korea|southkorea|south korea|🇷🇺|俄罗斯|ru_|russia|🇳🇱|荷兰|nl_|netherlands|holland|🇮🇳|印度|in_|india|🇲🇾|马来西亚|my_|malaysia|🇵🇱|波兰|pl_|poland|🇪🇪|爱沙尼亚|ee_|estonia|🇦🇪|阿联酋|ae_|uae|unitedarabemirates|united arab emirates|🇳🇬|尼日利亚|ng_|nigeria|🇧🇬|保加利亚|bg_|bulgaria|🇸🇨|塞舌尔|sc_|seychelles|🇬🇧|英国|gb_|greatbritain|great britain|🇪🇸|西班牙|es_|spain|🇻🇳|越南|vn_|vietnam|🇸🇽|荷属圣马丁|nn_|sintmaarten|sint maarten|stmaarten|st maarten|🇲🇴|澳门|macao|mo_|🇵🇭|菲律宾|pilipinas|ph_|🇹🇭|泰国|thailand|th_|🇲🇳|蒙古|mongolia|mn_)).*$"}

rules:
  # 广告拦截
  #- AND,((RULE-SET,anti-AD),(NOT,(!(RULE-SET,anti-AD-white))),(NOT,(!(RULE-SET,UnBan)))),🚫广告拦截
  - AND,((GEOSITE,category-ads-all),(NOT,(!(RULE-SET,anti-AD-white))),(NOT,(!(RULE-SET,UnBan)))),🚫广告拦截
  - AND,((RULE-SET,AD),(NOT,(!(RULE-SET,anti-AD-white))),(NOT,(!(RULE-SET,UnBan)))),🚫广告拦截
  - AND,((RULE-SET,Advertising),(NOT,(!(RULE-SET,anti-AD-white))),(NOT,(!(RULE-SET,UnBan)))),🚫广告拦截
  - AND,((RULE-SET,AdvertisingMiTV),(NOT,(!(RULE-SET,anti-AD-white))),(NOT,(!(RULE-SET,UnBan)))),🚫广告拦截
  - AND,((RULE-SET,BanAD),(NOT,(!(RULE-SET,anti-AD-white))),(NOT,(!(RULE-SET,UnBan)))),🚫广告拦截
  - AND,((RULE-SET,BanEasyList),(NOT,(!(RULE-SET,anti-AD-white))),(NOT,(!(RULE-SET,UnBan)))),🚫广告拦截
  - AND,((RULE-SET,BanEasyListChina),(NOT,(!(RULE-SET,anti-AD-white))),(NOT,(!(RULE-SET,UnBan)))),🚫广告拦截
  - AND,((RULE-SET,BanEasyPrivacy),(NOT,(!(RULE-SET,anti-AD-white))),(NOT,(!(RULE-SET,UnBan)))),🚫广告拦截
  - AND,((RULE-SET,BanProgramAD),(NOT,(!(RULE-SET,anti-AD-white))),(NOT,(!(RULE-SET,UnBan)))),🚫广告拦截
  - AND,((RULE-SET,EasyList),(NOT,(!(RULE-SET,anti-AD-white))),(NOT,(!(RULE-SET,UnBan)))),🚫广告拦截
  - AND,((RULE-SET,EasyListChina),(NOT,(!(RULE-SET,anti-AD-white))),(NOT,(!(RULE-SET,UnBan)))),🚫广告拦截
  - AND,((RULE-SET,EasyPrivacy),(NOT,(!(RULE-SET,anti-AD-white))),(NOT,(!(RULE-SET,UnBan)))),🚫广告拦截
  - AND,((RULE-SET,ProgramAD),(NOT,(!(RULE-SET,anti-AD-white))),(NOT,(!(RULE-SET,UnBan)))),🚫广告拦截
  - AND,((RULE-SET,reject),(NOT,(!(RULE-SET,anti-AD-white))),(NOT,(!(RULE-SET,UnBan)))),🚫广告拦截

  # 全球直连
  - AND,((GEOSITE,cn),(NOT,(!(GEOSITE,google)))),🎯全球直连
  - AND,((RULE-SET,direct),(NOT,(!(GEOSITE,google)))),🎯全球直连
  - GEOIP,CN,🎯全球直连,no-resolve
  - GEOIP,PRIVATE,🎯全球直连,no-resolve
  #- GEOSITE,bilibili,🎯全球直连
  #- GEOSITE,china-list,🎯全球直连
  #- GEOSITE,steam@cn,🎯全球直连
  - RULE-SET,apple,🎯全球直连
  - RULE-SET,applications,🎯全球直连
  - RULE-SET,Bilibili,🎯全球直连
  - RULE-SET,ChinaDomain,🎯全球直连
  - RULE-SET,ChinaIp,🎯全球直连,no-resolve
  - RULE-SET,ChinaIpV6,🎯全球直连
  - RULE-SET,ChinaMedia,🎯全球直连
  - RULE-SET,cncidr,🎯全球直连,no-resolve
  - RULE-SET,icloud,🎯全球直连
  - RULE-SET,lancidr,🎯全球直连,no-resolve
  - RULE-SET,private,🎯全球直连
  - RULE-SET,ASNChina,🎯全球直连

  # 节点代理
  - MATCH,🔰节点选择

rule-anchor:
  ip: &ip {type: http, interval: 600, behavior: ipcidr, format: yaml}
  domain: &domain {type: http, interval: 600, behavior: domain, format: yaml}
  classical: &classical {type: http, interval: 600, behavior: classical, format: yaml}

rule-providers:
  # 域名规则
  AD:
    <<: *domain
    url: "https://ghp.ci/https://raw.githubusercontent.com/earoftoast/clash-rules/main/AD.yaml"
    path: ./ruleset/AD.yaml

  EasyList:
    <<: *domain
    url: "https://ghp.ci/https://raw.githubusercontent.com/earoftoast/clash-rules/main/EasyList.yaml"
    path: ./ruleset/EasyList.yaml

  EasyListChina:
    <<: *domain
    url: "https://ghp.ci/https://raw.githubusercontent.com/earoftoast/clash-rules/main/EasyListChina.yaml"
    path: ./ruleset/EasyListChina.yaml

  EasyPrivacy:
    <<: *domain
    url: "https://ghp.ci/https://raw.githubusercontent.com/earoftoast/clash-rules/main/EasyPrivacy.yaml"
    path: ./ruleset/EasyPrivacy.yaml

  ProgramAD:
    <<: *domain
    url: "https://ghp.ci/https://raw.githubusercontent.com/earoftoast/clash-rules/main/ProgramAD.yaml"
    path: ./ruleset/ProgramAD.yaml

#  anti-AD:
#    <<: *domain
#    url: "https://ghp.ci/https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-clash.yaml"
#    path: ./ruleset/anti-AD.yaml

  anti-AD-white:
    <<: *domain
    url: "https://ghp.ci/https://raw.githubusercontent.com/privacy-protection-tools/dead-horse/master/anti-ad-white-for-clash.yaml"
    path: ./ruleset/anti-AD-white.yaml

  apple:
    <<: *domain
    url: "https://ghp.ci/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/apple.txt"
    path: ./ruleset/apple.yaml

  direct:
    <<: *domain
    url: "https://ghp.ci/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/direct.txt"
    path: ./ruleset/direct.yaml

  icloud:
    <<: *domain
    url: "https://ghp.ci/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/icloud.txt"
    path: ./ruleset/icloud.yaml

  private:
    <<: *domain
    url: "https://ghp.ci/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/private.txt"
    path: ./ruleset/private.yaml

  reject:
    <<: *domain
    url: "https://ghp.ci/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/reject.txt"
    path: ./ruleset/reject.yaml

  # IP规则
  ChinaIp:
    <<: *ip
    url: "https://ghp.ci/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/Providers/ChinaIp.yaml"
    path: ./ruleset/ChinaIp.yaml

  cncidr:
    <<: *ip
    url: "https://ghp.ci/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/cncidr.txt"
    path: ./ruleset/cncidr.yaml

  lancidr:
    <<: *ip
    url: "https://ghp.ci/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/lancidr.txt"
    path: ./ruleset/lancidr.yaml

  # 嵌套规则
  Advertising:
    <<: *classical
    url: "https://ghp.ci/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Advertising/Advertising.yaml"
    path: ./ruleset/Advertising.yaml

  AdvertisingMiTV:
    <<: *classical
    url: "https://ghp.ci/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/AdvertisingMiTV/AdvertisingMiTV.yaml"
    path: ./ruleset/AdvertisingMiTV.yaml

  applications:
    <<: *classical
    url: "https://ghp.ci/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/applications.txt"
    path: ./ruleset/applications.yaml

  ASNChina:
    <<: *classical
    url: "https://ghp.ci/https://raw.githubusercontent.com/VirgilClyne/GetSomeFries/main/ruleset/ASN.China.yaml"
    path: ./ruleset/ASNChina.yaml

  BanAD:
    <<: *classical
    url: "https://ghp.ci/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/Providers/BanAD.yaml"
    path: ./ruleset/BanAD.yaml

  BanEasyList:
    <<: *classical
    url: "https://ghp.ci/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/Providers/BanEasyList.yaml"
    path: ./ruleset/BanEasyList.yaml

  BanEasyListChina:
    <<: *classical
    url: "https://ghp.ci/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/Providers/BanEasyListChina.yaml"
    path: ./ruleset/BanEasyListChina.yaml

  BanEasyPrivacy:
    <<: *classical
    url: "https://ghp.ci/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/Providers/BanEasyPrivacy.yaml"
    path: ./ruleset/BanEasyPrivacy.yaml

  BanProgramAD:
    <<: *classical
    url: "https://ghp.ci/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/Providers/BanProgramAD.yaml"
    path: ./ruleset/BanProgramAD.yaml

  Bilibili:
    <<: *classical
    url: "https://ghp.ci/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/Providers/Ruleset/Bilibili.yaml"
    path: ./ruleset/Bilibili.yaml

  ChinaDomain:
    <<: *classical
    url: "https://ghp.ci/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/Providers/ChinaDomain.yaml"
    path: ./ruleset/ChinaDomain.yaml

  ChinaIpV6:
    <<: *classical
    url: "https://ghp.ci/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/Providers/ChinaIpV6.yaml"
    path: ./ruleset/ChinaIpV6.yaml

  ChinaMedia:
    <<: *classical
    url: "https://ghp.ci/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/Providers/ChinaMedia.yaml"
    path: ./ruleset/ChinaMedia.yaml
    
  UnBan:
    <<: *classical
    url: "https://ghp.ci/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/Providers/UnBan.yaml"
    path: ./ruleset/UnBan.yaml
